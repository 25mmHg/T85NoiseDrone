
T85NoiseDrone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000780  00000814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000061b  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f2  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031e  00000000  00000000  000013bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e8       	ldi	r30, 0x80	; 128
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 37       	cpi	r26, 0x70	; 112
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e7       	ldi	r26, 0x70	; 112
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 37       	cpi	r26, 0x71	; 113
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	94 c3       	rjmp	.+1832   	; 0x77c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	00 d0       	rcall	.+0      	; 0x5c <main+0x6>
  5c:	00 d0       	rcall	.+0      	; 0x5e <main+0x8>
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	de b7       	in	r29, 0x3e	; 62
	MYDDR  |=  ((1<<OUT3) | (1<<OUT4) | (1<<OUT2) | (1<<OUT0));
  62:	87 b3       	in	r24, 0x17	; 23
  64:	8d 61       	ori	r24, 0x1D	; 29
  66:	87 bb       	out	0x17, r24	; 23
	MYPORT |=  ((1<<OUT3) | (1<<OUT4) | (1<<OUT2) | (1<<OUT0));
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	8d 61       	ori	r24, 0x1D	; 29
  6c:	88 bb       	out	0x18, r24	; 24
	MYPORT |=  (1<<BUTTON);            // set pullup
  6e:	c1 9a       	sbi	0x18, 1	; 24
	const uint32_t lfsr_tapsA  = 0xE100000;
	const uint32_t lfsr_tapsB  = 0xE100000;
	const uint32_t lfsr_tapsC  = 0xE100000;
	const uint32_t lfsr_tapsD  = 0xE100000;
	int16_t lfsr_diff = 540;
	uint8_t lfsr_dir = DOWN;
  70:	21 2c       	mov	r2, r1
	static uint32_t lfsrD = 126041972; // Wert 809 Schritte vor A...
	const uint32_t lfsr_tapsA  = 0xE100000;
	const uint32_t lfsr_tapsB  = 0xE100000;
	const uint32_t lfsr_tapsC  = 0xE100000;
	const uint32_t lfsr_tapsD  = 0xE100000;
	int16_t lfsr_diff = 540;
  72:	8c e1       	ldi	r24, 0x1C	; 28
  74:	92 e0       	ldi	r25, 0x02	; 2
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(2);
			// Umkehrung der Verschiebungrichtung der Folgen nach Tastendruck
			if (rememberTheButton==1)
			{
				rememberTheButton = 0;
				lfsr_dir = !lfsr_dir;
  7a:	33 24       	eor	r3, r3
  7c:	33 94       	inc	r3
	uint8_t lfsr_dir = DOWN;

	// Rauschgenerator mit 4LFSR
	while(1) 
    {		
		if      (lfsr_diff >=  809) lfsr_dir = DOWN;
  7e:	89 32       	cpi	r24, 0x29	; 41
  80:	e3 e0       	ldi	r30, 0x03	; 3
  82:	9e 07       	cpc	r25, r30
  84:	0c f0       	brlt	.+2      	; 0x88 <main+0x32>
  86:	ba c1       	rjmp	.+884    	; 0x3fc <__stack+0x19d>
		else if (lfsr_diff <= -180) lfsr_dir = UP;
  88:	8d 34       	cpi	r24, 0x4D	; 77
  8a:	9f 4f       	sbci	r25, 0xFF	; 255
  8c:	14 f4       	brge	.+4      	; 0x92 <main+0x3c>
  8e:	22 24       	eor	r2, r2
  90:	23 94       	inc	r2
		else;
		static uint8_t rememberTheButton = 0;
		
		// Wenn Taste nicht gedrückt 4freilaufende LFSR mit gleichbleibender Distanz zueinander
		while(BUTTON_RELEASED)
  92:	b1 99       	sbic	0x16, 1	; 22
  94:	c6 c0       	rjmp	.+396    	; 0x222 <main+0x1cc>
  96:	d4 c0       	rjmp	.+424    	; 0x240 <main+0x1ea>
			{
				rememberTheButton = 0;
				lfsr_dir = !lfsr_dir;
			}
			// 4LFSR mit bis zu 32Bit Länge nach E.Galois
			lfsrA=(lfsrA >> 1)^(-(lfsrA & 1) & lfsr_tapsA);
  98:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <lfsrA.1731>
  9c:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <lfsrA.1731+0x1>
  a0:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lfsrA.1731+0x2>
  a4:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lfsrA.1731+0x3>
  a8:	d9 01       	movw	r26, r18
  aa:	c8 01       	movw	r24, r16
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	99 27       	eor	r25, r25
  b0:	aa 27       	eor	r26, r26
  b2:	bb 27       	eor	r27, r27
  b4:	b0 95       	com	r27
  b6:	a0 95       	com	r26
  b8:	90 95       	com	r25
  ba:	81 95       	neg	r24
  bc:	9f 4f       	sbci	r25, 0xFF	; 255
  be:	af 4f       	sbci	r26, 0xFF	; 255
  c0:	bf 4f       	sbci	r27, 0xFF	; 255
  c2:	88 27       	eor	r24, r24
  c4:	99 27       	eor	r25, r25
  c6:	a0 71       	andi	r26, 0x10	; 16
  c8:	be 70       	andi	r27, 0x0E	; 14
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	17 95       	ror	r17
  d0:	07 95       	ror	r16
  d2:	08 27       	eor	r16, r24
  d4:	19 27       	eor	r17, r25
  d6:	2a 27       	eor	r18, r26
  d8:	3b 27       	eor	r19, r27
  da:	00 93 6c 00 	sts	0x006C, r16	; 0x80006c <lfsrA.1731>
  de:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <lfsrA.1731+0x1>
  e2:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <lfsrA.1731+0x2>
  e6:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <lfsrA.1731+0x3>
			lfsrB=(lfsrB >> 1)^(-(lfsrB & 1) & lfsr_tapsB);
  ea:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <lfsrB.1732>
  ee:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <lfsrB.1732+0x1>
  f2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <lfsrB.1732+0x2>
  f6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <lfsrB.1732+0x3>
  fa:	db 01       	movw	r26, r22
  fc:	ca 01       	movw	r24, r20
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	99 27       	eor	r25, r25
 102:	aa 27       	eor	r26, r26
 104:	bb 27       	eor	r27, r27
 106:	b0 95       	com	r27
 108:	a0 95       	com	r26
 10a:	90 95       	com	r25
 10c:	81 95       	neg	r24
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	af 4f       	sbci	r26, 0xFF	; 255
 112:	bf 4f       	sbci	r27, 0xFF	; 255
 114:	88 27       	eor	r24, r24
 116:	99 27       	eor	r25, r25
 118:	a0 71       	andi	r26, 0x10	; 16
 11a:	be 70       	andi	r27, 0x0E	; 14
 11c:	76 95       	lsr	r23
 11e:	67 95       	ror	r22
 120:	57 95       	ror	r21
 122:	47 95       	ror	r20
 124:	48 27       	eor	r20, r24
 126:	59 27       	eor	r21, r25
 128:	6a 27       	eor	r22, r26
 12a:	7b 27       	eor	r23, r27
 12c:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <lfsrB.1732>
 130:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <lfsrB.1732+0x1>
 134:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <lfsrB.1732+0x2>
 138:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <lfsrB.1732+0x3>
			lfsrC=(lfsrC >> 1)^(-(lfsrC & 1) & lfsr_tapsC);
 13c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <lfsrC.1733>
 140:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <lfsrC.1733+0x1>
 144:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <lfsrC.1733+0x2>
 148:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <lfsrC.1733+0x3>
 14c:	6c 01       	movw	r12, r24
 14e:	7d 01       	movw	r14, r26
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	ce 22       	and	r12, r30
 154:	dd 24       	eor	r13, r13
 156:	ee 24       	eor	r14, r14
 158:	ff 24       	eor	r15, r15
 15a:	f0 94       	com	r15
 15c:	e0 94       	com	r14
 15e:	d0 94       	com	r13
 160:	c0 94       	com	r12
 162:	c1 1c       	adc	r12, r1
 164:	d1 1c       	adc	r13, r1
 166:	e1 1c       	adc	r14, r1
 168:	f1 1c       	adc	r15, r1
 16a:	cc 24       	eor	r12, r12
 16c:	dd 24       	eor	r13, r13
 16e:	e0 e1       	ldi	r30, 0x10	; 16
 170:	ee 22       	and	r14, r30
 172:	ee e0       	ldi	r30, 0x0E	; 14
 174:	fe 22       	and	r15, r30
 176:	b6 95       	lsr	r27
 178:	a7 95       	ror	r26
 17a:	97 95       	ror	r25
 17c:	87 95       	ror	r24
 17e:	8c 25       	eor	r24, r12
 180:	9d 25       	eor	r25, r13
 182:	ae 25       	eor	r26, r14
 184:	bf 25       	eor	r27, r15
 186:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <lfsrC.1733>
 18a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <lfsrC.1733+0x1>
 18e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <lfsrC.1733+0x2>
 192:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <lfsrC.1733+0x3>
			lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
 196:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	90 90 61 00 	lds	r9, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 19e:	a0 90 62 00 	lds	r10, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1a2:	b0 90 63 00 	lds	r11, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1a6:	75 01       	movw	r14, r10
 1a8:	64 01       	movw	r12, r8
 1aa:	e1 e0       	ldi	r30, 0x01	; 1
 1ac:	ce 22       	and	r12, r30
 1ae:	dd 24       	eor	r13, r13
 1b0:	ee 24       	eor	r14, r14
 1b2:	ff 24       	eor	r15, r15
 1b4:	f0 94       	com	r15
 1b6:	e0 94       	com	r14
 1b8:	d0 94       	com	r13
 1ba:	c0 94       	com	r12
 1bc:	c1 1c       	adc	r12, r1
 1be:	d1 1c       	adc	r13, r1
 1c0:	e1 1c       	adc	r14, r1
 1c2:	f1 1c       	adc	r15, r1
 1c4:	26 01       	movw	r4, r12
 1c6:	37 01       	movw	r6, r14
 1c8:	44 24       	eor	r4, r4
 1ca:	55 24       	eor	r5, r5
 1cc:	e0 e1       	ldi	r30, 0x10	; 16
 1ce:	6e 22       	and	r6, r30
 1d0:	ee e0       	ldi	r30, 0x0E	; 14
 1d2:	7e 22       	and	r7, r30
 1d4:	75 01       	movw	r14, r10
 1d6:	64 01       	movw	r12, r8
 1d8:	f6 94       	lsr	r15
 1da:	e7 94       	ror	r14
 1dc:	d7 94       	ror	r13
 1de:	c7 94       	ror	r12
 1e0:	c4 24       	eor	r12, r4
 1e2:	d5 24       	eor	r13, r5
 1e4:	e6 24       	eor	r14, r6
 1e6:	f7 24       	eor	r15, r7
 1e8:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1f4:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			// PowerMixer
			MYPIN |= ((lfsrA & 1) << OUT3) | ((lfsrB & 1) << OUT4) | ((lfsrC & 1) << OUT2) | ((lfsrD & 1) << OUT0);
 1f8:	e6 b3       	in	r30, 0x16	; 22
 1fa:	fc 2d       	mov	r31, r12
 1fc:	f1 70       	andi	r31, 0x01	; 1
 1fe:	cf 2e       	mov	r12, r31
 200:	ce 2a       	or	r12, r30
 202:	01 70       	andi	r16, 0x01	; 1
 204:	00 0f       	add	r16, r16
 206:	00 0f       	add	r16, r16
 208:	00 0f       	add	r16, r16
 20a:	c0 2a       	or	r12, r16
 20c:	41 70       	andi	r20, 0x01	; 1
 20e:	42 95       	swap	r20
 210:	40 7f       	andi	r20, 0xF0	; 240
 212:	4c 29       	or	r20, r12
 214:	81 70       	andi	r24, 0x01	; 1
 216:	88 0f       	add	r24, r24
 218:	88 0f       	add	r24, r24
 21a:	84 2b       	or	r24, r20
 21c:	86 bb       	out	0x16, r24	; 22
		else if (lfsr_diff <= -180) lfsr_dir = UP;
		else;
		static uint8_t rememberTheButton = 0;
		
		// Wenn Taste nicht gedrückt 4freilaufende LFSR mit gleichbleibender Distanz zueinander
		while(BUTTON_RELEASED)
 21e:	b1 9b       	sbis	0x16, 1	; 22
 220:	0f c0       	rjmp	.+30     	; 0x240 <main+0x1ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x1ce>
 228:	00 00       	nop
		{
			// gleiche Looplänge wie Loop mit gedrücktem Taster
			_delay_us(2);
			// Umkehrung der Verschiebungrichtung der Folgen nach Tastendruck
			if (rememberTheButton==1)
 22a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	09 f0       	breq	.+2      	; 0x234 <main+0x1de>
 232:	32 cf       	rjmp	.-412    	; 0x98 <main+0x42>
			{
				rememberTheButton = 0;
 234:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
				lfsr_dir = !lfsr_dir;
 238:	21 10       	cpse	r2, r1
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	28 2e       	mov	r2, r24
 23e:	2c cf       	rjmp	.-424    	; 0x98 <main+0x42>
	uint8_t lfsr_dir = DOWN;

	// Rauschgenerator mit 4LFSR
	while(1) 
    {		
		if      (lfsr_diff >=  809) lfsr_dir = DOWN;
 240:	1c 82       	std	Y+4, r1	; 0x04
 242:	1b 82       	std	Y+3, r1	; 0x03
 244:	d2 c0       	rjmp	.+420    	; 0x3ea <__stack+0x18b>
			MYPIN |= ((lfsrA & 1) << OUT3) | ((lfsrB & 1) << OUT4) | ((lfsrC & 1) << OUT2) | ((lfsrD & 1) << OUT0);
		}
		// Nur wenn Taste gedrückt aller 2000 Schritte Abstand der Folgen A<->B, B<->C, C<->D variieren
		for(uint16_t k=0; k<2000 && BUTTON_PRESSED; k++)
		{
			rememberTheButton = 1;
 246:	30 92 70 00 	sts	0x0070, r3	; 0x800070 <__data_end>
			if(k!=1)
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	09 f4       	brne	.+2      	; 0x254 <main+0x1fe>
 252:	d6 c0       	rjmp	.+428    	; 0x400 <__LOCK_REGION_LENGTH__>
			{
				lfsrA=(lfsrA >> 1)^(-(lfsrA & 1) & lfsr_tapsA);
 254:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <lfsrA.1731>
 258:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <lfsrA.1731+0x1>
 25c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lfsrA.1731+0x2>
 260:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lfsrA.1731+0x3>
 264:	d9 01       	movw	r26, r18
 266:	c8 01       	movw	r24, r16
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	99 27       	eor	r25, r25
 26c:	aa 27       	eor	r26, r26
 26e:	bb 27       	eor	r27, r27
 270:	b0 95       	com	r27
 272:	a0 95       	com	r26
 274:	90 95       	com	r25
 276:	81 95       	neg	r24
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	af 4f       	sbci	r26, 0xFF	; 255
 27c:	bf 4f       	sbci	r27, 0xFF	; 255
 27e:	88 27       	eor	r24, r24
 280:	99 27       	eor	r25, r25
 282:	a0 71       	andi	r26, 0x10	; 16
 284:	be 70       	andi	r27, 0x0E	; 14
 286:	36 95       	lsr	r19
 288:	27 95       	ror	r18
 28a:	17 95       	ror	r17
 28c:	07 95       	ror	r16
 28e:	08 27       	eor	r16, r24
 290:	19 27       	eor	r17, r25
 292:	2a 27       	eor	r18, r26
 294:	3b 27       	eor	r19, r27
 296:	00 93 6c 00 	sts	0x006C, r16	; 0x80006c <lfsrA.1731>
 29a:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <lfsrA.1731+0x1>
 29e:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <lfsrA.1731+0x2>
 2a2:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <lfsrA.1731+0x3>
				lfsrB=(lfsrB >> 1)^(-(lfsrB & 1) & lfsr_tapsB);
 2a6:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <lfsrB.1732>
 2aa:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <lfsrB.1732+0x1>
 2ae:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <lfsrB.1732+0x2>
 2b2:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <lfsrB.1732+0x3>
 2b6:	db 01       	movw	r26, r22
 2b8:	ca 01       	movw	r24, r20
 2ba:	81 70       	andi	r24, 0x01	; 1
 2bc:	99 27       	eor	r25, r25
 2be:	aa 27       	eor	r26, r26
 2c0:	bb 27       	eor	r27, r27
 2c2:	b0 95       	com	r27
 2c4:	a0 95       	com	r26
 2c6:	90 95       	com	r25
 2c8:	81 95       	neg	r24
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	af 4f       	sbci	r26, 0xFF	; 255
 2ce:	bf 4f       	sbci	r27, 0xFF	; 255
 2d0:	88 27       	eor	r24, r24
 2d2:	99 27       	eor	r25, r25
 2d4:	a0 71       	andi	r26, 0x10	; 16
 2d6:	be 70       	andi	r27, 0x0E	; 14
 2d8:	76 95       	lsr	r23
 2da:	67 95       	ror	r22
 2dc:	57 95       	ror	r21
 2de:	47 95       	ror	r20
 2e0:	48 27       	eor	r20, r24
 2e2:	59 27       	eor	r21, r25
 2e4:	6a 27       	eor	r22, r26
 2e6:	7b 27       	eor	r23, r27
 2e8:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <lfsrB.1732>
 2ec:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <lfsrB.1732+0x1>
 2f0:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <lfsrB.1732+0x2>
 2f4:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <lfsrB.1732+0x3>
				lfsrC=(lfsrC >> 1)^(-(lfsrC & 1) & lfsr_tapsC);
 2f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <lfsrC.1733>
 2fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <lfsrC.1733+0x1>
 300:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <lfsrC.1733+0x2>
 304:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <lfsrC.1733+0x3>
 308:	6c 01       	movw	r12, r24
 30a:	7d 01       	movw	r14, r26
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	ce 22       	and	r12, r30
 310:	dd 24       	eor	r13, r13
 312:	ee 24       	eor	r14, r14
 314:	ff 24       	eor	r15, r15
 316:	f0 94       	com	r15
 318:	e0 94       	com	r14
 31a:	d0 94       	com	r13
 31c:	c0 94       	com	r12
 31e:	c1 1c       	adc	r12, r1
 320:	d1 1c       	adc	r13, r1
 322:	e1 1c       	adc	r14, r1
 324:	f1 1c       	adc	r15, r1
 326:	cc 24       	eor	r12, r12
 328:	dd 24       	eor	r13, r13
 32a:	e0 e1       	ldi	r30, 0x10	; 16
 32c:	ee 22       	and	r14, r30
 32e:	ee e0       	ldi	r30, 0x0E	; 14
 330:	fe 22       	and	r15, r30
 332:	b6 95       	lsr	r27
 334:	a7 95       	ror	r26
 336:	97 95       	ror	r25
 338:	87 95       	ror	r24
 33a:	8c 25       	eor	r24, r12
 33c:	9d 25       	eor	r25, r13
 33e:	ae 25       	eor	r26, r14
 340:	bf 25       	eor	r27, r15
 342:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <lfsrC.1733>
 346:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <lfsrC.1733+0x1>
 34a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <lfsrC.1733+0x2>
 34e:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <lfsrC.1733+0x3>
				lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
 352:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 356:	90 90 61 00 	lds	r9, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 35a:	a0 90 62 00 	lds	r10, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 35e:	b0 90 63 00 	lds	r11, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 362:	75 01       	movw	r14, r10
 364:	64 01       	movw	r12, r8
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	ce 22       	and	r12, r30
 36a:	dd 24       	eor	r13, r13
 36c:	ee 24       	eor	r14, r14
 36e:	ff 24       	eor	r15, r15
 370:	f0 94       	com	r15
 372:	e0 94       	com	r14
 374:	d0 94       	com	r13
 376:	c0 94       	com	r12
 378:	c1 1c       	adc	r12, r1
 37a:	d1 1c       	adc	r13, r1
 37c:	e1 1c       	adc	r14, r1
 37e:	f1 1c       	adc	r15, r1
 380:	26 01       	movw	r4, r12
 382:	37 01       	movw	r6, r14
 384:	44 24       	eor	r4, r4
 386:	55 24       	eor	r5, r5
 388:	e0 e1       	ldi	r30, 0x10	; 16
 38a:	6e 22       	and	r6, r30
 38c:	ee e0       	ldi	r30, 0x0E	; 14
 38e:	7e 22       	and	r7, r30
 390:	75 01       	movw	r14, r10
 392:	64 01       	movw	r12, r8
 394:	f6 94       	lsr	r15
 396:	e7 94       	ror	r14
 398:	d7 94       	ror	r13
 39a:	c7 94       	ror	r12
 39c:	c4 24       	eor	r12, r4
 39e:	d5 24       	eor	r13, r5
 3a0:	e6 24       	eor	r14, r6
 3a2:	f7 24       	eor	r15, r7
 3a4:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a8:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3ac:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3b0:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
					lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
					lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
				}
			}
			// PowerMixer
			MYPIN |= ((lfsrA & 1) << OUT3) | ((lfsrB & 1) << OUT4) | ((lfsrC & 1) << OUT2) | ((lfsrD & 1) << OUT0);
 3b4:	b6 b2       	in	r11, 0x16	; 22
 3b6:	01 70       	andi	r16, 0x01	; 1
 3b8:	00 0f       	add	r16, r16
 3ba:	00 0f       	add	r16, r16
 3bc:	00 0f       	add	r16, r16
 3be:	2c 2d       	mov	r18, r12
 3c0:	21 70       	andi	r18, 0x01	; 1
 3c2:	c2 2e       	mov	r12, r18
 3c4:	cb 28       	or	r12, r11
 3c6:	0c 29       	or	r16, r12
 3c8:	41 70       	andi	r20, 0x01	; 1
 3ca:	42 95       	swap	r20
 3cc:	40 7f       	andi	r20, 0xF0	; 240
 3ce:	40 2b       	or	r20, r16
 3d0:	81 70       	andi	r24, 0x01	; 1
 3d2:	88 0f       	add	r24, r24
 3d4:	88 0f       	add	r24, r24
 3d6:	84 2b       	or	r24, r20
 3d8:	86 bb       	out	0x16, r24	; 22
			lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
			// PowerMixer
			MYPIN |= ((lfsrA & 1) << OUT3) | ((lfsrB & 1) << OUT4) | ((lfsrC & 1) << OUT2) | ((lfsrD & 1) << OUT0);
		}
		// Nur wenn Taste gedrückt aller 2000 Schritte Abstand der Folgen A<->B, B<->C, C<->D variieren
		for(uint16_t k=0; k<2000 && BUTTON_PRESSED; k++)
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	9c 81       	ldd	r25, Y+4	; 0x04
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	9c 83       	std	Y+4, r25	; 0x04
 3e2:	8b 83       	std	Y+3, r24	; 0x03
 3e4:	80 3d       	cpi	r24, 0xD0	; 208
 3e6:	97 40       	sbci	r25, 0x07	; 7
 3e8:	11 f0       	breq	.+4      	; 0x3ee <__stack+0x18f>
 3ea:	b1 9b       	sbis	0x16, 1	; 22
 3ec:	2c cf       	rjmp	.-424    	; 0x246 <main+0x1f0>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
	uint8_t lfsr_dir = DOWN;

	// Rauschgenerator mit 4LFSR
	while(1) 
    {		
		if      (lfsr_diff >=  809) lfsr_dir = DOWN;
 3f2:	89 32       	cpi	r24, 0x29	; 41
 3f4:	e3 e0       	ldi	r30, 0x03	; 3
 3f6:	9e 07       	cpc	r25, r30
 3f8:	0c f4       	brge	.+2      	; 0x3fc <__stack+0x19d>
 3fa:	46 ce       	rjmp	.-884    	; 0x88 <main+0x32>
 3fc:	21 2c       	mov	r2, r1
 3fe:	49 ce       	rjmp	.-878    	; 0x92 <main+0x3c>
			}
			else
			{
				if(lfsr_dir == DOWN)
				{
					lfsr_diff--;
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	9a 81       	ldd	r25, Y+2	; 0x02
				lfsrC=(lfsrC >> 1)^(-(lfsrC & 1) & lfsr_tapsC);
				lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
			}
			else
			{
				if(lfsr_dir == DOWN)
 404:	21 10       	cpse	r2, r1
 406:	d8 c0       	rjmp	.+432    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				{
					lfsr_diff--;
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	89 83       	std	Y+1, r24	; 0x01
					//lfsrA 3Schritte
					lfsrA=(lfsrA >> 1)^(-(lfsrA & 1) & lfsr_tapsA);
 40e:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <lfsrA.1731>
 412:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <lfsrA.1731+0x1>
 416:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lfsrA.1731+0x2>
 41a:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lfsrA.1731+0x3>
 41e:	b9 01       	movw	r22, r18
 420:	a8 01       	movw	r20, r16
 422:	41 70       	andi	r20, 0x01	; 1
 424:	55 27       	eor	r21, r21
 426:	66 27       	eor	r22, r22
 428:	77 27       	eor	r23, r23
 42a:	70 95       	com	r23
 42c:	60 95       	com	r22
 42e:	50 95       	com	r21
 430:	41 95       	neg	r20
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	6f 4f       	sbci	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	44 27       	eor	r20, r20
 43a:	55 27       	eor	r21, r21
 43c:	60 71       	andi	r22, 0x10	; 16
 43e:	7e 70       	andi	r23, 0x0E	; 14
 440:	36 95       	lsr	r19
 442:	27 95       	ror	r18
 444:	17 95       	ror	r17
 446:	07 95       	ror	r16
 448:	40 27       	eor	r20, r16
 44a:	51 27       	eor	r21, r17
 44c:	62 27       	eor	r22, r18
 44e:	73 27       	eor	r23, r19
					lfsrA=(lfsrA >> 1)^(-(lfsrA & 1) & lfsr_tapsA);
 450:	db 01       	movw	r26, r22
 452:	ca 01       	movw	r24, r20
 454:	81 70       	andi	r24, 0x01	; 1
 456:	99 27       	eor	r25, r25
 458:	aa 27       	eor	r26, r26
 45a:	bb 27       	eor	r27, r27
 45c:	b0 95       	com	r27
 45e:	a0 95       	com	r26
 460:	90 95       	com	r25
 462:	81 95       	neg	r24
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	af 4f       	sbci	r26, 0xFF	; 255
 468:	bf 4f       	sbci	r27, 0xFF	; 255
 46a:	88 27       	eor	r24, r24
 46c:	99 27       	eor	r25, r25
 46e:	a0 71       	andi	r26, 0x10	; 16
 470:	be 70       	andi	r27, 0x0E	; 14
 472:	76 95       	lsr	r23
 474:	67 95       	ror	r22
 476:	57 95       	ror	r21
 478:	47 95       	ror	r20
 47a:	84 27       	eor	r24, r20
 47c:	95 27       	eor	r25, r21
 47e:	a6 27       	eor	r26, r22
 480:	b7 27       	eor	r27, r23
					lfsrA=(lfsrA >> 1)^(-(lfsrA & 1) & lfsr_tapsA);
 482:	8c 01       	movw	r16, r24
 484:	9d 01       	movw	r18, r26
 486:	01 70       	andi	r16, 0x01	; 1
 488:	11 27       	eor	r17, r17
 48a:	22 27       	eor	r18, r18
 48c:	33 27       	eor	r19, r19
 48e:	30 95       	com	r19
 490:	20 95       	com	r18
 492:	10 95       	com	r17
 494:	01 95       	neg	r16
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	2f 4f       	sbci	r18, 0xFF	; 255
 49a:	3f 4f       	sbci	r19, 0xFF	; 255
 49c:	00 27       	eor	r16, r16
 49e:	11 27       	eor	r17, r17
 4a0:	20 71       	andi	r18, 0x10	; 16
 4a2:	3e 70       	andi	r19, 0x0E	; 14
 4a4:	b6 95       	lsr	r27
 4a6:	a7 95       	ror	r26
 4a8:	97 95       	ror	r25
 4aa:	87 95       	ror	r24
 4ac:	08 27       	eor	r16, r24
 4ae:	19 27       	eor	r17, r25
 4b0:	2a 27       	eor	r18, r26
 4b2:	3b 27       	eor	r19, r27
 4b4:	00 93 6c 00 	sts	0x006C, r16	; 0x80006c <lfsrA.1731>
 4b8:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <lfsrA.1731+0x1>
 4bc:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <lfsrA.1731+0x2>
 4c0:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <lfsrA.1731+0x3>
					//lfsrB 2Schritte
					lfsrB=(lfsrB >> 1)^(-(lfsrB & 1) & lfsr_tapsB);
 4c4:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <lfsrB.1732>
 4c8:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <lfsrB.1732+0x1>
 4cc:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <lfsrB.1732+0x2>
 4d0:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <lfsrB.1732+0x3>
 4d4:	d7 01       	movw	r26, r14
 4d6:	c6 01       	movw	r24, r12
 4d8:	81 70       	andi	r24, 0x01	; 1
 4da:	99 27       	eor	r25, r25
 4dc:	aa 27       	eor	r26, r26
 4de:	bb 27       	eor	r27, r27
 4e0:	b0 95       	com	r27
 4e2:	a0 95       	com	r26
 4e4:	90 95       	com	r25
 4e6:	81 95       	neg	r24
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	af 4f       	sbci	r26, 0xFF	; 255
 4ec:	bf 4f       	sbci	r27, 0xFF	; 255
 4ee:	88 27       	eor	r24, r24
 4f0:	99 27       	eor	r25, r25
 4f2:	a0 71       	andi	r26, 0x10	; 16
 4f4:	be 70       	andi	r27, 0x0E	; 14
 4f6:	f6 94       	lsr	r15
 4f8:	e7 94       	ror	r14
 4fa:	d7 94       	ror	r13
 4fc:	c7 94       	ror	r12
 4fe:	8c 25       	eor	r24, r12
 500:	9d 25       	eor	r25, r13
 502:	ae 25       	eor	r26, r14
 504:	bf 25       	eor	r27, r15
					lfsrB=(lfsrB >> 1)^(-(lfsrB & 1) & lfsr_tapsB);
 506:	ac 01       	movw	r20, r24
 508:	bd 01       	movw	r22, r26
 50a:	41 70       	andi	r20, 0x01	; 1
 50c:	55 27       	eor	r21, r21
 50e:	66 27       	eor	r22, r22
 510:	77 27       	eor	r23, r23
 512:	70 95       	com	r23
 514:	60 95       	com	r22
 516:	50 95       	com	r21
 518:	41 95       	neg	r20
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	6f 4f       	sbci	r22, 0xFF	; 255
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	44 27       	eor	r20, r20
 522:	55 27       	eor	r21, r21
 524:	60 71       	andi	r22, 0x10	; 16
 526:	7e 70       	andi	r23, 0x0E	; 14
 528:	b6 95       	lsr	r27
 52a:	a7 95       	ror	r26
 52c:	97 95       	ror	r25
 52e:	87 95       	ror	r24
 530:	48 27       	eor	r20, r24
 532:	59 27       	eor	r21, r25
 534:	6a 27       	eor	r22, r26
 536:	7b 27       	eor	r23, r27
 538:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <lfsrB.1732>
 53c:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <lfsrB.1732+0x1>
 540:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <lfsrB.1732+0x2>
 544:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <lfsrB.1732+0x3>
					//lfsrC 1Schritt
					lfsrC=(lfsrC >> 1)^(-(lfsrC & 1) & lfsr_tapsC);
 548:	80 90 64 00 	lds	r8, 0x0064	; 0x800064 <lfsrC.1733>
 54c:	90 90 65 00 	lds	r9, 0x0065	; 0x800065 <lfsrC.1733+0x1>
 550:	a0 90 66 00 	lds	r10, 0x0066	; 0x800066 <lfsrC.1733+0x2>
 554:	b0 90 67 00 	lds	r11, 0x0067	; 0x800067 <lfsrC.1733+0x3>
 558:	75 01       	movw	r14, r10
 55a:	64 01       	movw	r12, r8
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	c9 22       	and	r12, r25
 560:	dd 24       	eor	r13, r13
 562:	ee 24       	eor	r14, r14
 564:	ff 24       	eor	r15, r15
 566:	f0 94       	com	r15
 568:	e0 94       	com	r14
 56a:	d0 94       	com	r13
 56c:	c0 94       	com	r12
 56e:	c1 1c       	adc	r12, r1
 570:	d1 1c       	adc	r13, r1
 572:	e1 1c       	adc	r14, r1
 574:	f1 1c       	adc	r15, r1
 576:	cc 24       	eor	r12, r12
 578:	dd 24       	eor	r13, r13
 57a:	e0 e1       	ldi	r30, 0x10	; 16
 57c:	ee 22       	and	r14, r30
 57e:	ee e0       	ldi	r30, 0x0E	; 14
 580:	fe 22       	and	r15, r30
 582:	d5 01       	movw	r26, r10
 584:	c4 01       	movw	r24, r8
 586:	b6 95       	lsr	r27
 588:	a7 95       	ror	r26
 58a:	97 95       	ror	r25
 58c:	87 95       	ror	r24
 58e:	8c 25       	eor	r24, r12
 590:	9d 25       	eor	r25, r13
 592:	ae 25       	eor	r26, r14
 594:	bf 25       	eor	r27, r15
 596:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <lfsrC.1733>
 59a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <lfsrC.1733+0x1>
 59e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <lfsrC.1733+0x2>
 5a2:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <lfsrC.1733+0x3>
 5a6:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5aa:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5ae:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5b2:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5b6:	fe ce       	rjmp	.-516    	; 0x3b4 <__stack+0x155>
					//lfsrD Halt
				}
				else
				{
					lfsr_diff++;
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	9a 83       	std	Y+2, r25	; 0x02
 5bc:	89 83       	std	Y+1, r24	; 0x01
					//lfsrA Halt
					//lfsrB 1Schritt
					lfsrB=(lfsrB >> 1)^(-(lfsrB & 1) & lfsr_tapsB);
 5be:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <lfsrB.1732>
 5c2:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <lfsrB.1732+0x1>
 5c6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <lfsrB.1732+0x2>
 5ca:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <lfsrB.1732+0x3>
 5ce:	db 01       	movw	r26, r22
 5d0:	ca 01       	movw	r24, r20
 5d2:	81 70       	andi	r24, 0x01	; 1
 5d4:	99 27       	eor	r25, r25
 5d6:	aa 27       	eor	r26, r26
 5d8:	bb 27       	eor	r27, r27
 5da:	b0 95       	com	r27
 5dc:	a0 95       	com	r26
 5de:	90 95       	com	r25
 5e0:	81 95       	neg	r24
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	af 4f       	sbci	r26, 0xFF	; 255
 5e6:	bf 4f       	sbci	r27, 0xFF	; 255
 5e8:	88 27       	eor	r24, r24
 5ea:	99 27       	eor	r25, r25
 5ec:	a0 71       	andi	r26, 0x10	; 16
 5ee:	be 70       	andi	r27, 0x0E	; 14
 5f0:	76 95       	lsr	r23
 5f2:	67 95       	ror	r22
 5f4:	57 95       	ror	r21
 5f6:	47 95       	ror	r20
 5f8:	48 27       	eor	r20, r24
 5fa:	59 27       	eor	r21, r25
 5fc:	6a 27       	eor	r22, r26
 5fe:	7b 27       	eor	r23, r27
 600:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <lfsrB.1732>
 604:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <lfsrB.1732+0x1>
 608:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <lfsrB.1732+0x2>
 60c:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <lfsrB.1732+0x3>
					//lfsrC 2Schritte
					lfsrC=(lfsrC >> 1)^(-(lfsrC & 1) & lfsr_tapsC);
 610:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <lfsrC.1733>
 614:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <lfsrC.1733+0x1>
 618:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <lfsrC.1733+0x2>
 61c:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <lfsrC.1733+0x3>
 620:	97 01       	movw	r18, r14
 622:	86 01       	movw	r16, r12
 624:	01 70       	andi	r16, 0x01	; 1
 626:	11 27       	eor	r17, r17
 628:	22 27       	eor	r18, r18
 62a:	33 27       	eor	r19, r19
 62c:	30 95       	com	r19
 62e:	20 95       	com	r18
 630:	10 95       	com	r17
 632:	01 95       	neg	r16
 634:	1f 4f       	sbci	r17, 0xFF	; 255
 636:	2f 4f       	sbci	r18, 0xFF	; 255
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	00 27       	eor	r16, r16
 63c:	11 27       	eor	r17, r17
 63e:	20 71       	andi	r18, 0x10	; 16
 640:	3e 70       	andi	r19, 0x0E	; 14
 642:	f6 94       	lsr	r15
 644:	e7 94       	ror	r14
 646:	d7 94       	ror	r13
 648:	c7 94       	ror	r12
 64a:	0c 25       	eor	r16, r12
 64c:	1d 25       	eor	r17, r13
 64e:	2e 25       	eor	r18, r14
 650:	3f 25       	eor	r19, r15
					lfsrC=(lfsrC >> 1)^(-(lfsrC & 1) & lfsr_tapsC);
 652:	d9 01       	movw	r26, r18
 654:	c8 01       	movw	r24, r16
 656:	81 70       	andi	r24, 0x01	; 1
 658:	99 27       	eor	r25, r25
 65a:	aa 27       	eor	r26, r26
 65c:	bb 27       	eor	r27, r27
 65e:	b0 95       	com	r27
 660:	a0 95       	com	r26
 662:	90 95       	com	r25
 664:	81 95       	neg	r24
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	af 4f       	sbci	r26, 0xFF	; 255
 66a:	bf 4f       	sbci	r27, 0xFF	; 255
 66c:	88 27       	eor	r24, r24
 66e:	99 27       	eor	r25, r25
 670:	a0 71       	andi	r26, 0x10	; 16
 672:	be 70       	andi	r27, 0x0E	; 14
 674:	36 95       	lsr	r19
 676:	27 95       	ror	r18
 678:	17 95       	ror	r17
 67a:	07 95       	ror	r16
 67c:	80 27       	eor	r24, r16
 67e:	91 27       	eor	r25, r17
 680:	a2 27       	eor	r26, r18
 682:	b3 27       	eor	r27, r19
 684:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <lfsrC.1733>
 688:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <lfsrC.1733+0x1>
 68c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <lfsrC.1733+0x2>
 690:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <lfsrC.1733+0x3>
					//lfsrD 3Schritte
					lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
 694:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 698:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 69c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 6a0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6a4:	68 01       	movw	r12, r16
 6a6:	79 01       	movw	r14, r18
 6a8:	e1 e0       	ldi	r30, 0x01	; 1
 6aa:	ce 22       	and	r12, r30
 6ac:	dd 24       	eor	r13, r13
 6ae:	ee 24       	eor	r14, r14
 6b0:	ff 24       	eor	r15, r15
 6b2:	f0 94       	com	r15
 6b4:	e0 94       	com	r14
 6b6:	d0 94       	com	r13
 6b8:	c0 94       	com	r12
 6ba:	c1 1c       	adc	r12, r1
 6bc:	d1 1c       	adc	r13, r1
 6be:	e1 1c       	adc	r14, r1
 6c0:	f1 1c       	adc	r15, r1
 6c2:	cc 24       	eor	r12, r12
 6c4:	dd 24       	eor	r13, r13
 6c6:	e0 e1       	ldi	r30, 0x10	; 16
 6c8:	ee 22       	and	r14, r30
 6ca:	ee e0       	ldi	r30, 0x0E	; 14
 6cc:	fe 22       	and	r15, r30
 6ce:	36 95       	lsr	r19
 6d0:	27 95       	ror	r18
 6d2:	17 95       	ror	r17
 6d4:	07 95       	ror	r16
 6d6:	46 01       	movw	r8, r12
 6d8:	57 01       	movw	r10, r14
 6da:	80 26       	eor	r8, r16
 6dc:	91 26       	eor	r9, r17
 6de:	a2 26       	eor	r10, r18
 6e0:	b3 26       	eor	r11, r19
					lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
 6e2:	95 01       	movw	r18, r10
 6e4:	84 01       	movw	r16, r8
 6e6:	01 70       	andi	r16, 0x01	; 1
 6e8:	11 27       	eor	r17, r17
 6ea:	22 27       	eor	r18, r18
 6ec:	33 27       	eor	r19, r19
 6ee:	30 95       	com	r19
 6f0:	20 95       	com	r18
 6f2:	10 95       	com	r17
 6f4:	01 95       	neg	r16
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	2f 4f       	sbci	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	68 01       	movw	r12, r16
 6fe:	79 01       	movw	r14, r18
 700:	cc 24       	eor	r12, r12
 702:	dd 24       	eor	r13, r13
 704:	e0 e1       	ldi	r30, 0x10	; 16
 706:	ee 22       	and	r14, r30
 708:	ee e0       	ldi	r30, 0x0E	; 14
 70a:	fe 22       	and	r15, r30
 70c:	95 01       	movw	r18, r10
 70e:	84 01       	movw	r16, r8
 710:	36 95       	lsr	r19
 712:	27 95       	ror	r18
 714:	17 95       	ror	r17
 716:	07 95       	ror	r16
 718:	0c 25       	eor	r16, r12
 71a:	1d 25       	eor	r17, r13
 71c:	2e 25       	eor	r18, r14
 71e:	3f 25       	eor	r19, r15
					lfsrD=(lfsrD >> 1)^(-(lfsrD & 1) & lfsr_tapsD);
 720:	68 01       	movw	r12, r16
 722:	79 01       	movw	r14, r18
 724:	e1 e0       	ldi	r30, 0x01	; 1
 726:	ce 22       	and	r12, r30
 728:	dd 24       	eor	r13, r13
 72a:	ee 24       	eor	r14, r14
 72c:	ff 24       	eor	r15, r15
 72e:	f0 94       	com	r15
 730:	e0 94       	com	r14
 732:	d0 94       	com	r13
 734:	c0 94       	com	r12
 736:	c1 1c       	adc	r12, r1
 738:	d1 1c       	adc	r13, r1
 73a:	e1 1c       	adc	r14, r1
 73c:	f1 1c       	adc	r15, r1
 73e:	cc 24       	eor	r12, r12
 740:	dd 24       	eor	r13, r13
 742:	e0 e1       	ldi	r30, 0x10	; 16
 744:	ee 22       	and	r14, r30
 746:	ee e0       	ldi	r30, 0x0E	; 14
 748:	fe 22       	and	r15, r30
 74a:	36 95       	lsr	r19
 74c:	27 95       	ror	r18
 74e:	17 95       	ror	r17
 750:	07 95       	ror	r16
 752:	c0 26       	eor	r12, r16
 754:	d1 26       	eor	r13, r17
 756:	e2 26       	eor	r14, r18
 758:	f3 26       	eor	r15, r19
 75a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
 75e:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 762:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 766:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 76a:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <lfsrA.1731>
 76e:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <lfsrA.1731+0x1>
 772:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lfsrA.1731+0x2>
 776:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lfsrA.1731+0x3>
 77a:	1c ce       	rjmp	.-968    	; 0x3b4 <__stack+0x155>

0000077c <_exit>:
 77c:	f8 94       	cli

0000077e <__stop_program>:
 77e:	ff cf       	rjmp	.-2      	; 0x77e <__stop_program>
